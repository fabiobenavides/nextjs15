
If you have code that must never end up on the client-side (no matter if it's a server action or not), you should instead use the server-only package as described here.

https://nextjs.org/docs/app/building-your-application/rendering/composition-patterns#keeping-server-only-code-out-of-the-client-environment


Running Prod mode:
npm run build
npm start

Prod code: ./next folder


4 types of cache: https://nextjs.org/docs/app/building-your-application/caching

Next 15+ cache is less agressive

Way to control the cache:

1- In the specific fetch
const response = await fetch('http://localhost:8080/messages', {
    //cache: 'no-store', //next 14 default 'force-cache' -- next 15 default 'no-store' less agressive OR
    next: {
      revalidate: 5 //seconds for next revalidate cache
    }
  });

2- export variables any of these 2:

export const revalidate = 5; //revalidate for the entire page in case there are multiples request
export const dynamic = 'force-dynamic'; //'force-dynamic' same as fetch: cache: 'no-store'

3- Inside a component function

unstable_noStore(); //same as no-store


4- revalidatePath or revalidateTag
revalidatePath('/messages'); //This is better, more efficient, for nested content: add a second parameter: , 'layout' 

revalidateTag('msg'); //if you assign tags to the request
Example:
const response = await fetch('http://localhost:8080/messages', {
  next: {tags: ['msg', 'msg2']}
});

5- cache react function

example:
export const getMessages = cache(function getMessages() {
  console.log('Fetching messages from db');
  return db.prepare('SELECT * FROM messages').all();
});



FORMs:

  nextjs 14:
  useFormState

  nextjs 15:
  useActionState


getStaticProps:
  This will run on the server at build time, and the result will be cached for the lifetime of the app. 
  This is useful for data that doesn't change often, like a blog post or a product page.
  You can add a revalidate property to the returned object to specify how often the page should be re-generated.

